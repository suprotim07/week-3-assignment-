class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def insert_in_middle(head, x):
    new_node = Node(x)
    
    # If list is empty
    if head is None:
        return new_node
    
    slow = head
    fast = head
    
    # Move fast by 2 and slow by 1
    # When fast reaches end, slow will be at middle
    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next
    
    # Insert new_node after slow
    new_node.next = slow.next
    slow.next = new_node
    
    return head

# Utility function to print list
def print_list(head):
    current = head
    while current:
        print(current.data, end=" -> ")
        current = current.next
    print("None")

# Example 1
head1 = Node(1)
head1.next = Node(2)
head1.next.next = Node(4)

head1 = insert_in_middle(head1, 3)
print_list(head1)  # Output: 1 ->_
